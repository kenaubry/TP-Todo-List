import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AuthService } from './auth.service';

@Injectable({
  providedIn: 'root' // âœ… disponible globalement
})
export class TaskService {

  /* ===================== CONFIG ===================== */
  private apiUrl = 'http://localhost:8080/api/tasks'; // endpoint backend des tÃ¢ches

  /* ===================== CONSTRUCTEUR ===================== */
  constructor(
    private http: HttpClient,
    private authService: AuthService
  ) {}

  /* ===================== UTILS ===================== */

  // ğŸ”¹ Ajoute le token JWT aux headers
  private getAuthHeaders(): HttpHeaders {
    const token = this.authService.getToken();
    return new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    });
  }

  /* ===================== MÃ‰THODES CRUD TÃ‚CHES ===================== */

  // ğŸ”¹ RÃ©cupÃ©rer toutes les tÃ¢ches de lâ€™utilisateur connectÃ©
  getTasks(): Observable<any[]> {
    return this.http.get<any[]>(this.apiUrl, { headers: this.getAuthHeaders() });
  }

  // ğŸ”¹ CrÃ©er une nouvelle tÃ¢che
  createTask(task: any): Observable<any> {
    return this.http.post(this.apiUrl, task, { headers: this.getAuthHeaders() });
  }

  // ğŸ”¹ Mettre Ã  jour une tÃ¢che
  updateTask(id: number, task: any): Observable<any> {
    return this.http.put(`${this.apiUrl}/${id}`, task, { headers: this.getAuthHeaders() });
  }

  // ğŸ”¹ Marquer une tÃ¢che comme complÃ©tÃ©e
  completeTask(id: number): Observable<any> {
    return this.http.patch(`${this.apiUrl}/${id}/complete`, {}, { headers: this.getAuthHeaders() });
  }

  // ğŸ”¹ Supprimer une tÃ¢che
  deleteTask(id: number): Observable<any> {
    return this.http.delete(`${this.apiUrl}/${id}`, { headers: this.getAuthHeaders() });
  }

  /* ===================== GESTION DES MEMBRES ===================== */

  // ğŸ”¹ Assigner un utilisateur Ã  une tÃ¢che
  assignUser(taskId: number, username: string): Observable<any> {
    return this.http.post(
      `${this.apiUrl}/${taskId}/assign`,
      { username },
      { headers: this.getAuthHeaders() }
    );
  }

  // ğŸ”¹ Retirer un utilisateur dâ€™une tÃ¢che
  removeUser(taskId: number, username: string): Observable<any> {
    return this.http.post(
      `${this.apiUrl}/${taskId}/remove`,
      { username },
      { headers: this.getAuthHeaders() }
    );
  }
}
